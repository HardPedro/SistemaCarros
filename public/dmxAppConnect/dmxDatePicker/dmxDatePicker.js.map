{"version":3,"sources":["patch/dateRangePicker.js","components/datePicker.js","components/dateRangePicker.js"],"names":["clickDate","daterangepicker","prototype","event","this","container","find","length","call","dmx","Component","extends","attributes","name","type","String","default","showdropdowns","Boolean","minyear","Number","undefined","maxyear","autoapply","opens","enum","drops","dropsup","showweeknumbers","mindate","maxdate","format","invaliddates","Array","invaliddatesStart","invaliddatesEnd","customonly","customdates","customdatesStart","customdatesEnd","customdatesClass","disableweekends","direction","weeklabel","applylabel","cancellabel","timepicker","use24hours","minutesIncrement","utc","events","show","Event","hide","apply","cancel","init","node","_isCustomDate","bind","_isInvalidDate","_updateValue","_applyHandler","_changeHandler","props","_createHiddenInput","removeAttribute","autocomplete","value","_formatDate","defaultValue","_createDaterangePicker","destroy","_daterangepicker","remove","_input","performUpdate","updatedProps","has","size","$node","disabled","_setValue","document","createElement","parentNode","insertBefore","$","parentEl","closest","body","singleDatePicker","autoUpdateInput","autoApply","showWeekNumbers","showDropdowns","minYear","maxYear","minDate","maxDate","locale","weekLabel","applyLabel","cancelLabel","buttonClasses","applyButtonClasses","cancelButtonClasses","isCustomDate","isInvalidDate","timePicker","timePicker24Hour","timePickerIncrement","on","dispatchEvent","data","str","moment","date","isValid","some","range","_isInRange","day","filter","map","start","end","isSameOrAfter","isSameOrBefore","toISOString","prevValue","_updateData","dirty","validate","set","nextTick","validity","valid","validationMessage","setStartDate","Date","setEndDate","startDate","_resetHandler","invalid","initialData","startdate","enddate","separator","unlinked","maxspanYears","maxspanMonths","maxspanWeeks","maxspanDays","methods","setValue","endDate","_input_start","_input_end","_getName","suffix","endsWith","slice","linkedCalendars","maxSpan","_getMaxSpan","prevStart","prevEnd","years","months","weeks","days"],"mappings":"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","file":"dmxDatePicker.js","sourcesContent":["(() => {\r\n  // patch original clickDate method to disallow selecting range with invalid dates in it\r\n  const clickDate = daterangepicker.prototype.clickDate;\r\n  daterangepicker.prototype.clickDate = function (event) {\r\n    if (this.container.find('.in-range:not(.available)').length) return;\r\n    return clickDate.call(this, event);\r\n  };\r\n})();","dmx.Component('date-picker', {\r\n\r\n  extends: 'form-element',\r\n\r\n  attributes: {\r\n    name: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    showdropdowns: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    minyear: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\r\n    maxyear: {\r\n      type: Number,\r\n      default: undefined,\r\n    },\r\n\r\n\t  autoapply: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    opens: {\r\n      type: String,\r\n      default: 'right',\r\n      enum: ['left', 'right', 'center'],\r\n    },\r\n\r\n    drops: {\r\n      type: String,\r\n      default: 'down',\r\n      enum: ['down', 'up', 'auto'],\r\n    },\r\n\r\n    dropsup: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    showweeknumbers: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    mindate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    maxdate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    format: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    invaliddates: {\r\n      type: Array,\r\n      default: [],\r\n    },\r\n\r\n    invaliddatesStart: {\r\n      type: String,\r\n      default: 'start',\r\n    },\r\n\r\n    invaliddatesEnd: {\r\n      type: String,\r\n      default: 'end',\r\n    },\r\n\r\n    customonly: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    customdates: {\r\n      type: Array,\r\n      default: [],\r\n    },\r\n\r\n    customdatesStart: {\r\n      type: String,\r\n      default: 'start',\r\n    },\r\n\r\n    customdatesEnd: {\r\n      type: String,\r\n      default: 'end',\r\n    },\r\n\r\n    customdatesClass: {\r\n      type: String,\r\n      default: 'class',\r\n    },\r\n\r\n    disableweekends: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    direction: {\r\n      type: String,\r\n      default: 'ltr',\r\n      enum: ['ltr', 'rtl'],\r\n    },\r\n\r\n    weeklabel: {\r\n      type: String,\r\n      default: 'W',\r\n    },\r\n\r\n    applylabel: {\r\n      type: String,\r\n      default: 'Apply',\r\n    },\r\n\r\n    cancellabel: {\r\n      type: String,\r\n      default: 'Cancel',\r\n    },\r\n\r\n    timepicker: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    use24hours: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    minutesIncrement: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    utc: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n\r\n  events: {\r\n    show: Event,\r\n    hide: Event,\r\n    apply: Event,\r\n    cancel: Event,\r\n  },\r\n\r\n  init (node) {\r\n    this._isCustomDate = this._isCustomDate.bind(this);\r\n    this._isInvalidDate = this._isInvalidDate.bind(this);\r\n    this._updateValue = this._updateValue.bind(this);\r\n    this._applyHandler = this._applyHandler.bind(this);\r\n    this._changeHandler = this._changeHandler.bind(this);\r\n\r\n    dmx.Component('form-element').prototype.init.call(this, node);\r\n\r\n    if (!this.props.format) {\r\n      this.props.format = this.props.timepicker ? 'L LT' : 'L';\r\n    }\r\n\r\n    this._createHiddenInput();\r\n\r\n    node.removeAttribute('name');\r\n    node.autocomplete = 'off';\r\n    node.value = this._formatDate(this.props.value) || '';\r\n    node.defaultValue = node.value;\r\n\r\n    this._createDaterangePicker();\r\n  },\r\n\r\n  destroy () {\r\n    if (this._daterangepicker) {\r\n      this._daterangepicker.remove();\r\n    }\r\n\r\n    if (this._input) {\r\n      this._input.remove();\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('name')) {\r\n      this._input.name = this.props.name;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('disabled')) {\r\n      this.$node.disabled = this.props.disabled;\r\n      this._input.disabled = this.props.disabled;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('value')) {\r\n      this._setValue(this.props.value, true);\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (!this.props.format) {\r\n      this.props.format = this.props.timepicker ? 'L LT' : 'L';\r\n    }\r\n\r\n    this._createDaterangePicker();\r\n  },\r\n\r\n  _createHiddenInput () {\r\n    this._input = document.createElement('input');\r\n    this._input.type = 'hidden';\r\n    this._input.name = this.props.name;\r\n    this._input.value = this.props.value || '';\r\n    this._input.defaultValue = this.props.value || '';\r\n    this.$node.parentNode.insertBefore(this._input, this.$node);\r\n  },\r\n\r\n  _createDaterangePicker () {\r\n    const $node = $(this.$node);\r\n\r\n    $node.daterangepicker({\r\n      parentEl: $node.closest('.modal, .offcanvas, .offcanvas-sm, .offcanvas-md, .offcanvas-lg, .offcanvas-xl, .offcanvas-xxl')[0] || document.body,\r\n      singleDatePicker: true,\r\n      autoUpdateInput: false,\r\n\t    autoApply: this.props.autoapply,\r\n      showWeekNumbers: this.props.showweeknumbers,\r\n      showDropdowns: this.props.showdropdowns,\r\n      minYear: this.props.minyear,\r\n      maxYear: this.props.maxyear,\r\n      opens: this.props.opens,\r\n      drops: this.props.dropsup ? 'up' : this.props.drops,\r\n      minDate: this._formatDate(this.props.mindate),\r\n      maxDate: this._formatDate(this.props.maxdate),\r\n      locale: {\r\n        format: this.props.format,\r\n        direction: this.props.direction,\r\n        weekLabel: this.props.weeklabel,\r\n        applyLabel: this.props.applylabel,\r\n        cancelLabel: this.props.cancellabel,\r\n      },\r\n      buttonClasses: '',\r\n      applyButtonClasses: '',\r\n      cancelButtonClasses: '',\r\n      isCustomDate: this._isCustomDate,\r\n      isInvalidDate: this._isInvalidDate,\r\n      timePicker: this.props.timepicker,\r\n      timePicker24Hour: this.props.use24hours,\r\n      timePickerIncrement: this.props.minutesIncrement,\r\n    }, this._updateValue);\r\n\r\n    $node.on('apply.daterangepicker', this._applyHandler);\r\n    $node.on('change.daterangepicker', this._changeHandler);\r\n\r\n    $node.on('show.daterangepicker', this.dispatchEvent.bind(this, 'show'));\r\n    $node.on('hide.daterangepicker', this.dispatchEvent.bind(this, 'hide'));\r\n    $node.on('apply.daterangepicker', this.dispatchEvent.bind(this, 'apply'));\r\n    $node.on('cancel.daterangepicker', this.dispatchEvent.bind(this, 'cancel'));\r\n\r\n    this._daterangepicker = $node.data('daterangepicker');\r\n  },\r\n\r\n  _formatDate (str) {\r\n    if (!str) return undefined;\r\n    if (str == 'now' || str == 'today') return moment().format(this.props.format);\r\n    const date = moment(str);\r\n    return date.isValid() ? date.format(this.props.format) : undefined;\r\n  },\r\n\r\n  _isInvalidDate (date) {\r\n    if (this.props.customonly && !this.props.customdates.some(range => this._isInRange(date, range, this.props.customdatesStart, this.props.customdatesEnd))) return true;\r\n    if (this.props.disableweekends && (date.day() === 0 || date.day() === 6)) return true;\r\n    return this.props.invaliddates.some(range => this._isInRange(date, range, this.props.invaliddatesStart, this.props.invaliddatesEnd));\r\n  },\r\n\r\n  _isCustomDate (date) {\r\n    return this.props.customdates.filter(range => this._isInRange(date, range, this.props.customdatesStart, this.props.customdatesEnd)).map(range => range[this.props.customdatesClass]);\r\n  },\r\n\r\n  _isInRange (date, range, start, end) {\r\n    if (range[start] && range[end]) return date.isSameOrAfter(range[start]) && date.isSameOrBefore(range[end]);\r\n    if (range[start]) return date.isSameOrAfter(range[start]);\r\n    if (range[end]) return date.isSameOrBefore(range[end]);\r\n    return false;\r\n  },\r\n\r\n  _updateValue (date) {\r\n    let value = this.props.timepicker ? this.props.utc ? date.toISOString() : date.format('YYYY-MM-DD HH:mm:ss') : date.format('YYYY-MM-DD');\r\n    let prevValue = this.data.value;\r\n    this._setValue(value);\r\n\r\n    if (prevValue !== this.data.value) {\r\n      this.dispatchEvent('change');\r\n      this.dispatchEvent('changed');\r\n    }\r\n  },\r\n\r\n  _updateData (event) {\r\n    if (event && this.$node.dirty) {\r\n      dmx.validate(this.$node);\r\n    }\r\n\r\n    this.set('disabled', this.$node.disabled);\r\n    if (this._input.value !== this.data.value) {\r\n      this.set('value', this._input.value);\r\n      dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n    }\r\n\r\n    if (this.$node.dirty) {\r\n      this.set('invalid', !this.$node.validity.valid);\r\n      this.set('validationMessage', this.$node.validationMessage);\r\n    }\r\n  },\r\n\r\n  _setValue (value, defaultValue) {\r\n    if (typeof value !== 'string') value = '';\r\n\r\n    if (value == 'now' || value == 'today') {\r\n      if (this.props.timepicker) {\r\n        value = this.props.utc ? moment().toISOString() : moment().format('YYYY-MM-DD HH:mm:ss');\r\n      } else {\r\n        value = moment().format('YYYY-MM-DD');\r\n      }\r\n    }\r\n\r\n    this._daterangepicker.setStartDate(this._formatDate(value) || new Date());\r\n    this._daterangepicker.setEndDate(this._formatDate(value) || new Date());\r\n\r\n    this.$node.value = this._formatDate(value) || '';\r\n    this._input.value = value || '';\r\n\r\n    if (defaultValue) {\r\n      this.$node.defaultValue = this.$node.value;\r\n      this._input.defaultValue = this._input.value;\r\n    }\r\n\r\n    this._updateData(true);\r\n  },\r\n\r\n  _applyHandler (event) {\r\n    this._updateValue(this._daterangepicker.startDate);\r\n  },\r\n\r\n  _changeHandler (event) {\r\n    if (!this.$node.value || !moment(this.$node.value, this.props.format).isValid()) {\r\n      this._setValue('');\r\n    } else {\r\n      if (this.props.timepicker) {\r\n        if (this.props.utc) {\r\n          this._setValue(moment(this.$node.value, this.props.format).toISOString());\r\n        } else {\r\n          this._setValue(moment(this.$node.value, this.props.format).format('YYYY-MM-DD HH:mm:ss'));\r\n        }\r\n      } else {\r\n        this._setValue(moment(this.$node.value, this.props.format).format('YYYY-MM-DD'));\r\n      }\r\n    }\r\n  },\r\n\r\n  _resetHandler (event) {\r\n    if (!this.$node) return;\r\n    this.$node.dirty = false;\r\n    this.set({\r\n      invalid: false,\r\n      validationMessage: '',\r\n    });\r\n    dmx.nextTick(() => {\r\n      if (!this.$node) return;\r\n      this._changeHandler()\r\n    });\r\n  },\r\n\r\n});\r\n","dmx.Component('date-range-picker', {\r\n\r\n  extends: 'date-picker',\r\n\r\n  initialData: {\r\n    start: '',\r\n    end: '',\r\n  },\r\n\r\n  attributes: {\r\n    startdate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    enddate: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    autoapply: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    separator: {\r\n      type: String,\r\n      default: ' - ',\r\n    },\r\n\r\n    unlinked: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    maxspanYears: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxspanMonths: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxspanWeeks: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n\r\n    maxspanDays: {\r\n      type: Number,\r\n      default: null,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    setValue (startDate, endDate) {\r\n      this._setValue(startDate, endDate);\r\n    },\r\n  },\r\n\r\n  init (node) {\r\n    dmx.Component('date-picker').prototype.init.call(this, node);\r\n\r\n    this._setValue({ start: this.props.startdate, end: this.props.enddate }, true);\r\n  },\r\n\r\n  destroy () {\r\n    if (this._daterangepicker) {\r\n      this._daterangepicker.remove();\r\n    }\r\n\r\n    if (this._input) {\r\n      this._input.remove();\r\n    }\r\n\r\n    if (this._input_start) {\r\n      this._input_start.remove();\r\n    }\r\n\r\n    if (this._input_end) {\r\n      this._input_end.remove();\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('name')) {\r\n      this._input.name = this.props.name;\r\n      this._input_start.name = this._getName('_start');\r\n      this._input_end.name = this._getName('_end');\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('disabled')) {\r\n      this.$node.disabled = this.props.disabled;\r\n      this._input.disabled = this.props.disabled;\r\n      this._input_start.disabled = this.props.disabled;\r\n      this._input_end.disabled = this.props.disabled;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (updatedProps.has('startdate') || updatedProps.has('enddate')) {\r\n      this._setValue({ start: this.props.startdate, end: this.props.enddate }, true);\r\n      if (updatedProps.has('startdate') && updatedProps.has('enddate') && updatedProps.size === 2) return;\r\n      if (updatedProps.size === 1) return;\r\n    }\r\n\r\n    if (!this.props.format) {\r\n      this.props.format = this.props.timepicker ? 'L LT' : 'L';\r\n    }\r\n\r\n    this._createDaterangePicker();\r\n  },\r\n\r\n  _createHiddenInput () {\r\n    dmx.Component('date-picker').prototype._createHiddenInput.call(this);\r\n\r\n    this._input_start = document.createElement('input');\r\n    this._input_start.type = 'hidden';\r\n    this._input_start.name = this._getName('_start');\r\n    this.$node.parentNode.insertBefore(this._input_start, this.$node);\r\n\r\n    this._input_end = document.createElement('input');\r\n    this._input_end.type = 'hidden';\r\n    this._input_end.name = this._getName('_end');\r\n    this.$node.parentNode.insertBefore(this._input_end, this.$node);\r\n  },\r\n\r\n  _getName (suffix) {\r\n    if (this.props.name.endsWith(']')) {\r\n      return this.props.name.slice(0, -1) + suffix + ']';\r\n    }\r\n    return this.props.name + suffix;\r\n  },\r\n\r\n  _createDaterangePicker () {\r\n    const $node = $(this.$node);\r\n\r\n    $node.daterangepicker({\r\n      parentEl: $node.closest('.modal, .offcanvas')[0] || document.body,\r\n      autoUpdateInput: false,\r\n      autoApply: this.props.autoapply,\r\n      linkedCalendars: !this.props.unlinked,\r\n      showWeekNumbers: this.props.showweeknumbers,\r\n      showDropdowns: this.props.showdropdowns,\r\n      minYear: this.props.minyear,\r\n      maxYear: this.props.maxyear,\r\n      opens: this.props.opens,\r\n      drops: this.props.dropsup ? 'up' : this.props.drops,\r\n      minDate: this._formatDate(this.props.mindate),\r\n      maxDate: this._formatDate(this.props.maxdate),\r\n      maxSpan: this._getMaxSpan(),\r\n      locale: {\r\n        format: this.props.format,\r\n        separator: this.props.separator,\r\n        direction: this.props.direction,\r\n        weekLabel: this.props.weeklabel,\r\n        applyLabel: this.props.applylabel,\r\n        cancelLabel: this.props.cancellabel,\r\n      },\r\n      buttonClasses: '',\r\n      applyButtonClasses: '',\r\n      cancelButtonClasses: '',\r\n      isCustomDate: this._isCustomDate,\r\n      isInvalidDate: this._isInvalidDate,\r\n      timePicker: this.props.timepicker,\r\n      timePicker24Hour: this.props.use24hours,\r\n      timePickerIncrement: this.props.minutesIncrement,\r\n    }, this._updateValue);\r\n\r\n    $node.on('apply.daterangepicker', this._applyHandler);\r\n    $node.on('change.daterangepicker', this._changeHandler);\r\n\r\n    $node.on('show.daterangepicker', this.dispatchEvent.bind(this, 'show'));\r\n    $node.on('hide.daterangepicker', this.dispatchEvent.bind(this, 'hide'));\r\n    $node.on('apply.daterangepicker', this.dispatchEvent.bind(this, 'apply'));\r\n    $node.on('cancel.daterangepicker', this.dispatchEvent.bind(this, 'cancel'));\r\n\r\n    this._daterangepicker = $node.data('daterangepicker');\r\n  },\r\n\r\n  _updateValue (startDate, endDate) {\r\n    let start = this.props.timepicker ? this.props.utc ? startDate.toISOString() : startDate.format('YYYY-MM-DD HH:mm:ss') : this.props.utc ? startDate.toISOString() : startDate.format('YYYY-MM-DD');\r\n    let end = this.props.timepicker ? this.props.utc ? endDate.toISOString() : endDate.format('YYYY-MM-DD HH:mm:ss') : this.props.utc ? endDate.toISOString() : endDate.format('YYYY-MM-DD');\r\n    let prevStart = this.data.start;\r\n    let prevEnd = this.data.end;\r\n\r\n    this._setValue({ start, end });\r\n\r\n    if (this.data.value !== prevStart || this.data.value !== prevEnd) {\r\n      this.dispatchEvent('change');\r\n      this.dispatchEvent('changed');\r\n    }\r\n  },\r\n\r\n  _updateData (event) {\r\n    if (event && this.$node.dirty) {\r\n      dmx.validate(this.$node);\r\n    }\r\n\r\n    this.set('disabled', this.$node.disabled);\r\n    if (this._input.value !== this.data.value || this._input_start !== this.data.start || this._input_end !== this.data.end) {\r\n      this.set({\r\n        value: this._input.value,\r\n        start: this._input_start.value,\r\n        end: this._input_end.value,\r\n      });\r\n      dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n    }\r\n\r\n    if (this.$node.dirty) {\r\n      this.set('invalid', !this.$node.validity.valid);\r\n      this.set('validationMessage', this.$node.validationMessage);\r\n    }\r\n  },\r\n\r\n  _setValue (value, defaultValue) {\r\n    let { start = '', end = '' } = value;\r\n\r\n    if (typeof start !== 'string') start = '';\r\n    if (typeof end !== 'string') end = '';\r\n\r\n    if (start == 'now' || start == 'today') {\r\n      start = this.props.timepicker ? this.props.utc ? moment().toISOString() : moment().format('YYYY-MM-DD HH:mm:ss') : moment().format('YYYY-MM-DD');\r\n    }\r\n\r\n    if (end == 'now' || end == 'today') {\r\n      end = this.props.timepicker ? this.props.utc ? moment().toISOString() : moment().format('YYYY-MM-DD HH:mm:ss') : moment().format('YYYY-MM-DD');\r\n    }\r\n\r\n    if (start) {\r\n      this._daterangepicker.setStartDate(this._formatDate(start));\r\n    }\r\n\r\n    if (end) {\r\n      this._daterangepicker.setEndDate(this._formatDate(end));\r\n    }\r\n\r\n    this.$node.value = start && end ? this._formatDate(start) + this.props.separator + this._formatDate(end) : '';\r\n    this._input.value = start && end ? start + '/' + end : '';\r\n    this._input_start.value = start || '';\r\n    this._input_end.value = end || '';\r\n\r\n    if (defaultValue) {\r\n      this.$node.defaultValue = this.$node.value;\r\n      this._input.defaultValue = this._input.value;\r\n      this._input_start.defaultValue = this._input_start.value;\r\n      this._input_end.defaultValue = this._input_end.value;\r\n    }\r\n\r\n    this._updateData(true);\r\n  },\r\n\r\n  _getMaxSpan () {\r\n    const { maxspanYears: years, maxspanMonths: months, maxspanWeeks: weeks, maxspanDays: days } = this.props;\r\n\r\n    if (years || months || weeks || days) {\r\n      return { years, months, weeks, days };\r\n    }\r\n  },\r\n\r\n  _applyHandler (event) {\r\n    const prevStart = this.data.start;\r\n    const prevEnd = this.data.end;\r\n\r\n    this._updateValue(this._daterangepicker.startDate, this._daterangepicker.endDate);\r\n\r\n    if (this._input_start.value !== prevStart || this._input_end.value !== prevEnd) {\r\n      this.dispatchEvent('changed');\r\n    }\r\n  },\r\n\r\n});\r\n"]}